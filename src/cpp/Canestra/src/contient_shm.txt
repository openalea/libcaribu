File envoi.cpp:
shminfo seginf;
  int shmid;
  //printf("<!>SHMMAX=%d, shmmax=%d\n\n",(int)SHMMAX, seginf.shmmax);
  shmid=shmget((key_t)1968,SEGSIZE*sizeof(Patch),IPC_CREAT|0666);
  printf("=> shmid = %d\n",shmid);
  if(shmid==-1){
  Ts=(Patch *) shmat(shmid,0,NULL);;
  shmctl(shmid,IPC_RMID,0);
  shmdt((void*)shmid);
File canopy_io.cpp:
 *       Chargement de la scene : parse_can, read_shm                     *
//-********************   Canopy::read_shm()    ***********************
long int Canopy::read_shm(int clef,char *nopti,char * name8,reel *bornemin,reel*bornemax,int sol,char *nsolem,Diffuseur **&TabDiff){
  int shmid;
  shmid=shmget((key_t)clef,SEGSIZE*sizeof(Patch) ,IPC_CREAT|0666);
  if(shmid==-1){//en cas de pb
  if(true||verbose) fprintf(stderr,"Canestra{read_shm] Clef=%d, Nt=%d\n",clef,Nt);
  Ts=(Patch *)shmat(shmid,0,NULL); 
      //cerr<<"Canopy[read_shm]ficoptik : sol lu\n";
      raus(tabopaque(nbopt)==NULL,"Canopy[read_shm] allocation tabopaque impossible!");  
      //cerr<<"Canopy[read_shm]ficoptik : espece no "<<nbopt<<endl;
      raus(tabopaque(nbopt)==NULL,"Canopy[read_shm] allocation tabopaque impossible!");
      raus(tabtransp(nbopt-1,0)==NULL,"Canopy[read_shm] allocation tabtransp_sup impossible!");
      raus(tabtransp(nbopt-1,1)==NULL,"Canopy[read_shm] allocation tabtransp_inf impossible!");      
      printf("INFTY read_shm() : %s =[%.3f,%.3f]x[%.3f,%.3f]\n",name8,bornemin[0],bornemax[0],bornemin[1],bornemax[1]);
  // lecture des primitives geometriques (shm clef)
  //liberation du shm
  shmdt((void*)shmid);
   if(rejet) cout <<"Canopy[read_shm] *************  Segment(s) rejete(s) *******\n";
  if(verbose)  cout << "Canopy [read_shm] nbre de primitives  ss sol = "<<nbp<<endl;
  if(verbose>1)  cout << "Canopy [read_shm] surface max primitive      = "<<smax<<endl;
    if(true||verbose) cout << "Canopy [read_shm] nbre de primitives  avec sol = "<<nbp<<endl; 
    if(verbose>1) printf("read_shm() : vmin[%d] = %g - vmax[%d] = %g \n",i,vmin[i],i,vmax[i]);
    if(verbose>1) cout<<"Canopy [read_shm] nbre de capteurs virtuels = "<<nbcell<<endl;
cout<<"\nCanopy [read_shm] nbre de primitives = "<<Ldiff.card()<<endl;
}//read_shm()
File radioxity.cpp:
 static   int clef_shm=-1;
    scene.read_shm(clef_shm,optname,name8,bornemin, bornemax,sol,nsolem,TabDiff); 
    int ia,shmid2=0;
      Nt=clef_shm/100;
      clef_shm%=100;
      clef_shm+=OFFS;
      fprintf(stderr,"==> print_Eabs(): Nt=%d, clef_shm=%d\n",Nt,clef_shm);
      shmid2=shmget((key_t)clef_shm,SEGSIZE*sizeof(double) ,IPC_CREAT|0666);
      if(shmid2==-1){//en cas de pb
      Te=(double *)shmat(shmid2,0,(int)NULL);
      shmdt((void*)shmid2);
	 "  -m shm_key\t Shared memory containing the scene\n"
    case 'm' : clef_shm=atoi(option.optarg);byseg=true; break;// by segmem clef 
  if(((maqname==NULL)&&byfile) ||((clef_shm==-1)&&byseg) || (lightname==NULL) || (optname==NULL)) {
    fprintf(stderr,"<!> Fatal error%c\n==> Canestra should be called with 3 necessary options:\n    [-M maqname| -m shmkey]  -p optname -l lightname \n ",(char)7);
  if(byseg ) cout <<"\n SegMem  maquette  :: "<<clef_shm;
